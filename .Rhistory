shiny::runApp()
shiny::runApp()
runApp()
?elseif
sum([2,3],[2])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(1,2,3)
table(1,2,3)
?table
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(1,2,3)
str(data.frame(1,2,3))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sum <- 0
i <- 1
j <- 10
alpha <- 0.05
# sample size
n <- 10
p_hypo <- 0.5
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
while (sum < alpha & i != j) {
if(prob[i] == prob[j] & prob[i]*2 <= alpha){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
}
else if(prob[i] <  prob[j] & sum + prob[i] <= alpha){
sum <- sum + prob()[i]
i <- i + 1
}
else if(prob[i] >  prob[j] & sum + prob[j] <= alpha){
sum <- sum + prob[j]
j <- j - 1
}
}
while (sum < alpha & i != j) {
if(prob[i] == prob[j] & prob[i]*2 <= alpha){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
}
else if(prob[i] <  prob[j] & sum + prob[i] <= alpha){
sum <- sum + prob[i]
i <- i + 1
}
else if(prob[i] >  prob[j] & sum + prob[j] <= alpha){
sum <- sum + prob[j]
j <- j - 1
}
}
sum <- 0
i <- 1
j <- 10
n <- 10
p_hypo <- 0.5
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
alpha <- 0.05
while (sum < alpha & i != j) {
if(prob[i] == prob[j] & prob[i]*2 <= alpha){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
}
else if(prob[i] <  prob[j] & sum + prob[i] <= alpha){
sum <- sum + prob[i]
i <- i + 1
}
else if(prob[i] >  prob[j] & sum + prob[j] <= alpha){
sum <- sum + prob[j]
j <- j - 1
}
}
sum <- 0
i <- 1
j <- 10
n <- 10
tp <- 0
p_hypo <- 0.5
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
alpha <- 0.05
while (sum < alpha & i != j) {
if(prob[i] == prob[j]){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
tp <- 1
}
else if(prob[i] <  prob[j]){
sum <- sum + prob[i]
i <- i + 1
tp <- 2
}
else if(prob[i] >  prob[j]){
sum <- sum + prob[j]
j <- j - 1
tp <- 3
}
}
if(tp == 1){
i <- i - 1
j <- j + 1
}
else if(tp == 2){
i <- i - 1
}
else{
j <- j+1
}
if(tp == 1){
i <- i - 1
j <- j + 1
}
else if(tp == 2){
i <- i - 1
}
else{
j <- j+1
}
if(tp == 1){
i <- i - 1
j <- j + 1
}
else if(tp == 2){
i <- i - 1
}
else{
j <- j+1
}
if(tp == 1){
i <- i - 1
j <- j + 1
}else if(tp == 2){
i <- i - 1
}else{
j <- j + 1
}
sum <- 0
i <- 1
j <- 10
n <- 10
tp <- 0
p_hypo <- 0.5
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
alpha <- 0.05
while (sum < alpha & i != j) {
if(prob[i] == prob[j]){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
tp <- 1
}else if(prob[i] <  prob[j]){
sum <- sum + prob[i]
i <- i + 1
tp <- 2
}else if(prob[i] >  prob[j]){
sum <- sum + prob[j]
j <- j - 1
tp <- 3
}
}
if(tp == 1){
i <- i - 1
j <- j + 1
}else if(tp == 2){
i <- i - 1
}else{
j <- j + 1
}
pw <- sum(c(prob[1:i], prob[j:n]))
prob
sum <- 0
i <- 1
j <- 13
n <- 13
tp <- 0
p_hypo <- 0.2
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
alpha <- 0.05
while (sum < alpha & i != j) {
if(prob[i] == prob[j]){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
tp <- 1
}else if(prob[i] <  prob[j]){
sum <- sum + prob[i]
i <- i + 1
tp <- 2
}else if(prob[i] >  prob[j]){
sum <- sum + prob[j]
j <- j - 1
tp <- 3
}
}
if(tp == 1){
i <- i - 1
j <- j + 1
}else if(tp == 2){
i <- i - 1
}else{
j <- j + 1
}
prob
sum(prob[1:6])
1 -sum(prob[1:6])
runApp()
sum <- 0
i <- 1
j <- 10
n <- 10
tp <- 0
p_hypo <- 0.5
num_succ <- seq(0, n, 1)
prob <- dbinom(num_succ, n, p_hypo)
alpha <- 0.05
while (sum < alpha & i != j) {
if(prob[i] == prob[j]){
sum <- sum + prob[i]*2
i <- i + 1
j <- j - 1
tp <- 1
}else if(prob[i] <  prob[j]){
sum <- sum + prob[i]
i <- i + 1
tp <- 2
}else if(prob[i] >  prob[j]){
sum <- sum + prob[j]
j <- j - 1
tp <- 3
}
}
if(tp == 1){
i <- i - 1
j <- j + 1
}else if(tp == 2){
i <- i - 1
}else{
j <- j + 1
}
prob
runApp()
runApp()
runApp()
